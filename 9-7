Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，
然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、
销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，
以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。


IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。

所以控制反转IoC(Inversion of Control)是说创建对象的控制权进行转移，以前创建对象的主动权和创建时机是由自己把控的，而现在这种权力转移到第三方

/******************************************************/
$request->input()//将输入的所有数据
$request->all()//输入数据与文件
$request->query()//相当于$_GET

flash/ flashOnly/ flashExcept
redirect()->back()->withInput('XXXXX')
return redirect('dashboard')->with('status', 'Profile updated!');

$request->old()

重定向到命名路由
如果调用不带参数的 redirect 方法，会返回一个 Illuminate\Routing\Redirector 实例，然后就可以调用Redirector实例上的所有方法。例如，要生成一个  RedirectResponse 到命名路由，可以使用 route 方法：

return redirect()->route('login');
return redirect()->route('profile', ['id'=>1]);
return redirect()->action('UserController@profile', ['id'=>1]);

