使用facade方法:
namespace App\Components\AttendanceService;

1.先写出具体要实现的类
class AttendanceService
{
    public function driver(string $driver)
    {
        ....
    }
}

2.继承facade类实现getFacadeAccessor()方法
namespace App\Components\AttendanceService;

class AttendanceServiceFacade extends \Illuminate\Support\Facades\Facade
{
    protected static function getFacadeAccessor()
    {
        return 'attendanceservice';
    }
}

3.将第二步的字符串使用单例模式转换为特定的类
namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AttendanceServiceProvider extends ServiceProvider
{
    //这里为true启用缓载服务提供者,在需要的时候才进行临时绑定, 而且还需使用provides()函数返回提供服务的名称
    protected $defer = true;
    public function boot()
    {
        //
    }
    //重点为这个方法
    public function register()
    {
        $this->app->singleton(
            'attendanceservice',
            'App\Components\AttendanceService\AttendanceService'
        );
    }
    public function provides()
    {
        return ['attendanceservice'];
    }
}

4.在config/app下配置
'providers' => [App\Providers\AttendanceServiceProvider::class,....]
'aliases' => ['AttendanceService' => App\Components\AttendanceService\AttendanceServiceFacade::class,....]

遍历并实现服务提供者并调用register()函数完成绑定
