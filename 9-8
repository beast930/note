{!! Form::open(['route'=>'projects.store', 'method'=>'post', 'files'=>true]) !!}
上传文件用'files'
提交路径有 'route', 'url'

artisan make:request CreateProjectRequest
在rules方法下编写相关方法
使用依赖注入public function store(CreateProjectRequest $request)

//这里学习了;route,method 在collective中的使用
'route' => ['tasks.store', 'project' => $project->id, 'a' => 111] http://.....?project=xxx&a=111
{!! Form::open(['route' => ['projects.destroy', $project->id], 'method' => 'DELETE']) !!}
    <button type="submit" class="btn">
        <i class="fa fa-btn fa-close"></i>
    </button>
{!! Form::close() !!}

//将$project与表单绑定,在更新的时候会自动填入数据
{!! Form::model($project, ['route'=>['projects.update', $project->id], 'method'=>'PUT', 'files'=>true]) !!}

//$projects为key=>value的数组, $project->id为select的默认选中的value
{!! Form::select('projectList', $projects, $project->id, [...]) !!}

$errors->any()   $errors->all()
$errors->has('name')//若元素名为name的验证出现错误
$errors->get('name')//返回出错的元素的信息

{!! Form::model($task,....) !!}
{!! Form::select('projectList', $projects, null, [...]) !!}
绑定的$task为Task模型,当访问select中的'projectList' 1.考虑之前的数据 2.考虑现有的数据 3.从模型Task调用getProjectListAttribute()方法(获取器)
返回相应的值
